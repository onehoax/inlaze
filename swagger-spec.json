{"openapi":"3.0.0","paths":{"/":{"get":{"operationId":"AppController_getHello","parameters":[],"responses":{"200":{"description":""}}}},"/users":{"post":{"operationId":"UsersController_create","summary":"","description":"create a new user; the user must be new (email); if role.id is not null, its value must be present in the role table.","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateUserDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"bad request response if criteria in description is not met."},"404":{"description":"not found response if role is not present in the role table."},"409":{"description":"conflict response if user already exists in the db."}},"tags":["users"]},"get":{"operationId":"UsersController_findAll","summary":"","description":"get all users.","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}}},"tags":["users"]}},"/users/{id}":{"get":{"operationId":"UsersController_findOne","summary":"","description":"get a single user by id.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"404":{"description":"not found response if user is not present in the app_user table."}},"tags":["users"]},"patch":{"operationId":"UsersController_update","summary":"","description":"update a user by id; the user must be present in in the app_user table; the new email must not conflict with existing ones; if role.id is not null, its value must be present in the role table.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUserDto"}}}},"responses":{"200":{"description":"records affected"},"400":{"description":"bad request response if criteria in description is not met."},"404":{"description":"not found response if user/role are not present in their respective tables."},"409":{"description":"conflict response if trying to update to existing email in db"}},"tags":["users"],"security":[{"bearer":[]}]},"delete":{"operationId":"UsersController_remove","summary":"","description":"soft delete a user by id; the user must be present in in the app_user table.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":"records affected"},"400":{"description":"bad request response if criteria in description is not met."},"404":{"description":"not found response if user is not present in the app_user table."}},"tags":["users"],"security":[{"bearer":[]}]}},"/roles":{"post":{"operationId":"RolesController_create","summary":"","description":"create a new role; the role must be new (name).","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/CreateRoleDto"}}}},"responses":{"201":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Role"}}}},"400":{"description":"bad request response if criteria in description is not met."},"409":{"description":"conflict response if role already exists in the db."}},"tags":["roles"]},"get":{"operationId":"RolesController_findAll","summary":"","description":"get all roles.","parameters":[],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/Role"}}}}}},"tags":["roles"]}},"/roles/{id}":{"get":{"operationId":"RolesController_findOne","summary":"","description":"get a single role by id.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":"","content":{"application/json":{"schema":{"$ref":"#/components/schemas/Role"}}}},"404":{"description":"not found response if role is not present in the role table."}},"tags":["roles"]},"patch":{"operationId":"RolesController_update","summary":"","description":"update a role by id; the role must be present in in the role table; the new name must not conflict with existing ones.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateRoleDto"}}}},"responses":{"200":{"description":"records affected"},"400":{"description":"bad request response if criteria in description is not met."},"404":{"description":"not found response if role is not present in the role table."},"409":{"description":"conflict response if trying to update to existing name in db"}},"tags":["roles"],"security":[{"bearer":[]}]},"delete":{"operationId":"RolesController_remove","summary":"","description":"soft delete a role by id; the role must be present in in the role table.","parameters":[{"name":"id","required":true,"in":"path","schema":{"type":"number"}}],"responses":{"200":{"description":"records affected"},"400":{"description":"bad request response if criteria in description is not met."},"404":{"description":"not found response if role is not present in the role table."}},"tags":["roles"],"security":[{"bearer":[]}]}},"/auth/login":{"post":{"operationId":"AuthController_login","summary":"","description":"login as a user with email and passowrd; returns a JWT which you can then attach to request headers for endpoints that require authentication.","parameters":[],"requestBody":{"required":true,"content":{"application/json":{"schema":{"$ref":"#/components/schemas/LoginDto"}}}},"responses":{"200":{"description":"returns a JWT which you can then attach to request headers for endpoints that require authentication.","content":{"application/json":{"schema":{"$ref":"#/components/schemas/AuthEntity"}}}},"400":{"description":"bad request response if criteria in description is not met."},"401":{"description":"unauthorizes response if passowrd does not match for email in the db."},"404":{"description":"not found response if user with email is not found in the db."}},"tags":["auth"]}}},"info":{"title":"Inlaze","description":"Inlaze Back End Test","version":"0.1","contact":{}},"tags":[],"servers":[],"components":{"securitySchemes":{"bearer":{"scheme":"bearer","bearerFormat":"JWT","type":"http"}},"schemas":{"CreateUserDto":{"type":"object","properties":{"full_name":{"type":"string"},"email":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"role":{"type":"number","example":{"id":1}}},"required":["full_name","email","password","phone","role"]},"Role":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"},"is_deleted":{"type":"boolean"},"created_at":{"format":"date-time","type":"string"},"updated_at":{"format":"date-time","type":"string"}},"required":["id","name","is_deleted","created_at","updated_at"]},"User":{"type":"object","properties":{"id":{"type":"number"},"full_name":{"type":"string"},"email":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"is_deleted":{"type":"boolean"},"created_at":{"format":"date-time","type":"string"},"updated_at":{"format":"date-time","type":"string"},"role":{"$ref":"#/components/schemas/Role"}},"required":["id","full_name","email","password","phone","is_deleted","created_at","updated_at","role"]},"UpdateUserDto":{"type":"object","properties":{"full_name":{"type":"string"},"email":{"type":"string"},"password":{"type":"string"},"phone":{"type":"string"},"role":{"type":"number","example":{"id":1}}}},"CreateRoleDto":{"type":"object","properties":{"name":{"type":"string"}},"required":["name"]},"UpdateRoleDto":{"type":"object","properties":{"name":{"type":"string"}}},"LoginDto":{"type":"object","properties":{"email":{"type":"string"},"password":{"type":"string"}},"required":["email","password"]},"AuthEntity":{"type":"object","properties":{"accessToken":{"type":"string"}},"required":["accessToken"]}}}}